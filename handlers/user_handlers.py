from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message,  CallbackQuery
from decouple import config
import throttled.limiter 
from utils.db import get_user_by_id, add_user, get_projects_by_id
from aiogram.types import Message
from keyboards import keybords_users as us_kb   
from create_bot import bot
from utils import db, utils
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import throttled



# from keyboards.keybords_users import main_contact_kb, channels_kb

router = Router()

class GitFlicExp(StatesGroup):
    username = State()
    result = State()
    check_state = State()


async def antiflood(*args, **kwargs):
    m = args[0]
    await m.answer("–ù–µ —Ñ–ª—É–¥–∏ :)")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(text =  '''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–µ—Ç–∞-–≤–µ—Ä–∏—Å—é —Ç–µ–ª–∞–≥—Ä–∞–º –±–æ—Ç–∞ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö CVE üíª\n 
                          \n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —Ö–∞–∫–∞—Ç–æ–Ω–∞, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º It–≥–æ—Ä–æ–¥–æ–º ü¶Ñ\n
                          \n–ö–µ–π—Å –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Infotecs\n
                          \n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏‚öôÔ∏è - /help ''', reply_markup=await us_kb.main_keyboard())
    telegram_id = message.from_user.id
    user_data = await get_user_by_id(telegram_id)
    if user_data is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_user(
            telegram_id=telegram_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )
        inGroupe = True
    else:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å bot_open –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        inGroupe = user_data.get('inGroupe', False)  # –í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é False

    if not inGroupe:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã
        #await message.answer("–¢—É—Ç –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞, —á—É—Ç—å –ø–æ–∑–∂–µ –Ω–∞–ø–∏—à–µ–º")
        pass
    else:
        pass
        # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        # await message.answer(
        #     "–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞–Ω–∞–ª—ã:",
        #     reply_markup=channels_tgk(kb_list))



@router.message(Command('menu')) 
async def command_menu_handler(message: Message) -> None:
     await message.answer(text =  '''–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –æ—Ç—Å—é–¥–∞ –≤—ã –º–æ–∂–∏—Ç–µ\n-<b>–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç</b> –≤—Ä—É—á–Ω—É—é,\n-–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—Å—è <b>—É–¥–æ–±–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–æ–π</b> –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ GitFlic''', reply_markup=await us_kb.main_keyboard())

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–º–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã
@router.message(Command('myprojects'))
async def command_myproject_handler(message: Message) -> None:
    projects = await get_projects_by_id(message.from_user.id)
    if projects:
        text = "–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:"
        for x in projects:
            text += '\n'+x
    else:
        text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤"
    await message.answer(text=text)



# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /–ø–æ–º—â—å
@router.message(Command('help'))
async def command_help_handler(message: Message) -> None:
    await message.answer(text ="""–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã - /myprojects\n
                         \n–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç - –ø–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞\n
                         \n–ë–æ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç miniapps üì≤\n
                         \n–û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á—É—Ç—å –ø–æ–∑–∂–µ ‚è≥""")


# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@router.channel_post()
async def chanel_cmd(chanel:Message):
    t = chanel.text
    users = await db.get_all_users_by_attack_stack(str(await utils.text_editor(t)).lower())
    
    for user in users:
        url = await utils.url_editor(t)
        await bot.send_message(chat_id=user,
                               text= "–í—ã—è–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å",reply_markup= await us_kb.channels_kb(url))
            
# –í—ã–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
@router.message(F.text.contains('üêª –í—ã–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–µ–∫—Ç—ã —Å GitFlic'))
async def command_help_handler(message: Message, state: FSMContext) -> None:
    await message.answer(text ="""–í–≤–µ–¥–∏—Ç—å –≤–∞—à –Ω–∏–∫ –Ω–∞ GitFlic(–±–µ–∑ @), —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ:""")
    await state.set_state(GitFlicExp.username)


@router.message(F.text, GitFlicExp.username)
async def start_GitFlicExp_username(message: Message, state: FSMContext):  
    ans= await utils.get_projects_and_stack(message.text)
    
    if ans:
        data = await state.get_data()
        await state.update_data(projects=ans)
        caption = f'–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —è –Ω–∞—à–µ–ª –≤–æ—Ç —Ç–∞–∫–∏–µ –ø—Ä–æ–µ–∫—Ç—ã:\n-{message.text}'
        for proj in ans:
            caption += "\n--> "+proj  
        caption+= "\n\n"+"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∫ —Å–µ–±–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å?"     
        await state.update_data(telegram_id=message.chat.id)
        await message.answer(text=caption, reply_markup= await us_kb.check_data())
        await state.set_state(GitFlicExp.check_state)
    else:
        await message.answer(text ='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫( –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')



    

# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
@router.callback_query(F.data == 'correct', GitFlicExp.check_state)
async def start_GitFlicExp_check_state_true(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    
    await call.message.edit_reply_markup(reply_markup=None)
    for proj in data.get("projects"):
        await db.add_project(data.get("telegram_id"),proj)
    await call.answer('–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', reply_markup=us_kb.main_keyboard())
    await state.clear()


# –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞
@router.callback_query(F.data == 'incorrect', GitFlicExp.check_state)
async def start_GitFlicExp_check_state_false(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–í–≤–µ–¥–∏—Ç—å –≤–∞—à –Ω–∏–∫ –Ω–∞ GitFlic(–±–µ–∑ @), —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ:')
    await state.set_state(GitFlicExp.username)